/*
 * Copyright 2012 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {

    // Target registry to be used to publish docker images needed for deployment
    targetReg = project.hasProperty('targetReg') ? project.getProperty('targetReg') : 'localhost:5000'

    // The tag used to tag the docker images push to the target registry
    targetTag = project.hasProperty('targetTag') ? project.getProperty('targetTag') : 'candidate'

    cordTesterPath = project.hasProperty('cordTesterPath') ? project.getProperty('cordTesterPath') : './src/test/setup'

    dockerPath = project.hasProperty('dockerPath') ? project.getProperty('dockerPath') : '/usr/bin'

    cordTesterImages = [ 'cord-test/radius:latest' : 'Dockerfile.radius', 'cord-test/quagga:latest' : 'Dockerfile.quagga', 'cord-test/nose:latest' : 'Dockerfile.tester' ]

}

// ~~~~~~~~~~~~~~~~~~~ Global tasks ~~~~~~~~~~~~~~~~~~~~~~~

// To be used to fetch upstream binaries, clone repos, etc.
task fetch {
    //commandLine "$cordTesterPath/onos_pull.sh", 'latest'
}

// To be used to generate all needed binaries that need to be present on the target
// as docker images in the local docker runner.
task buildImages {
    // ...
    cordTesterImages.each { tag, dockerfile ->
        println "Building Docker image ${tag} using ${dockerfile}"
        exec {
             executable "$dockerPath/docker"
             args "build", "-t", "${tag}", "-f", "${dockerfile}", "."
        }
    }
}

task buildRadiusImage(type: Exec) {
    commandLine "$dockerPath/docker", 'build', '-t', 'cord-test/radius', '-f', 'Dockerfile.radius', '.'
}

task tagRadiusImage(type: Exec) {
   dependsOn buildRadiusImage
   commandLine "$dockerPath/docker", 'tag', 'cord-test/radius', "$targetReg/cord-test/radius:$targetTag"
}

task publishRadiusImage(type: Exec) {
    dependsOn tagRadiusImage
    commandLine "$dockerPath/docker", 'push', "$targetReg/cord-test/radius:$targetTag"
}

task buildQuaggaImage(type: Exec) {
    commandLine "$dockerPath/docker", 'build', '-t', 'cord-test/quagga', '-f', 'Dockerfile.quagga', '.'
}

task tagQuaggaImage(type: Exec) {
   dependsOn buildQuaggaImage
   commandLine "$dockerPath/docker", 'tag', 'cord-test/quagga', "$targetReg/cord-test/quagga:$targetTag"
}

task publishQuaggaImage(type: Exec) {
    dependsOn tagQuaggaImage
    commandLine "$dockerPath/docker", 'push', "$targetReg/cord-test/quagga:$targetTag"
}

task buildTesterImage(type: Exec) {
    commandLine "$dockerPath/docker", 'build', '-t', 'cord-test/nose', '-f', 'Dockerfile.tester', '.'
}

task tagTesterImage(type: Exec) {
   dependsOn buildTesterImage
   commandLine "$dockerPath/docker", 'tag', 'cord-test/nose', "$targetReg/cord-test/nose:$targetTag"
}

task publishTesterImage(type: Exec) {
    dependsOn tagTesterImage
    commandLine "$dockerPath/docker", 'push', "$targetReg/cord-test/nose:$targetTag"
}

// Publish image(s) built during the build step into targetReg registry using the targetTag
// tag. See maas subproject for examples on how to do this.
task publishImages {
     dependsOn publishTesterImage
     dependsOn publishQuaggaImage
     dependsOn publishRadiusImage
}

task publish {
    dependsOn publishImages
}
